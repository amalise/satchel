# Generated by Django 4.0.4 on 2022-05-16 03:23

import datetime
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('blog', '0001_initial'),
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('flexpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.flexpage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'core.flexpage'),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('flexpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.flexpage')),
                ('date_published', models.DateField(blank=True, default=datetime.datetime.today, null=True, verbose_name='Data published')),
            ],
            options={
                'abstract': False,
            },
            bases=('core.flexpage',),
        ),
        migrations.CreateModel(
            name='BlogTagRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_tag_relationship', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogTagRelationship', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blogcategoryrelationship',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_blog_relationship', to='core.category'),
        ),
        migrations.AddField(
            model_name='blogcategoryrelationship',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_category_relationship', to='blog.blogpage'),
        ),
        migrations.CreateModel(
            name='BlogPersonRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_person_relationship', to='blog.blogpage')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='person_blog_relationship', to='core.person')),
            ],
            options={
                'unique_together': {('page', 'person')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='blogcategoryrelationship',
            unique_together={('page', 'category')},
        ),
    ]
